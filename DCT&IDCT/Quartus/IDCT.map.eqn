-- Copyright (C) 1991-2006 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.
--Array_value[6] is Array_value[6]
--operation mode is input

Array_value[6] = INPUT();


--value_in[9] is value_in[9]
--operation mode is input

value_in[9] = INPUT();


--Array_value[5] is Array_value[5]
--operation mode is input

Array_value[5] = INPUT();


--Array_value[4] is Array_value[4]
--operation mode is input

Array_value[4] = INPUT();


--Array_value[3] is Array_value[3]
--operation mode is input

Array_value[3] = INPUT();


--Array_value[2] is Array_value[2]
--operation mode is input

Array_value[2] = INPUT();


--Array_value[1] is Array_value[1]
--operation mode is input

Array_value[1] = INPUT();


--Array_value[0] is Array_value[0]
--operation mode is input

Array_value[0] = INPUT();


--value_in[8] is value_in[8]
--operation mode is input

value_in[8] = INPUT();


--value_in[7] is value_in[7]
--operation mode is input

value_in[7] = INPUT();


--value_in[6] is value_in[6]
--operation mode is input

value_in[6] = INPUT();


--value_in[5] is value_in[5]
--operation mode is input

value_in[5] = INPUT();


--value_in[4] is value_in[4]
--operation mode is input

value_in[4] = INPUT();


--value_in[3] is value_in[3]
--operation mode is input

value_in[3] = INPUT();


--value_in[2] is value_in[2]
--operation mode is input

value_in[2] = INPUT();


--value_in[1] is value_in[1]
--operation mode is input

value_in[1] = INPUT();


--value_in[0] is value_in[0]
--operation mode is input

value_in[0] = INPUT();


--display[0] is display[0]
--operation mode is input

display[0] = INPUT();


--display[1] is display[1]
--operation mode is input

display[1] = INPUT();


--value_out[0] is value_out[0]
--operation mode is output

value_out[0] = OUTPUT(GND);


--value_out[1] is value_out[1]
--operation mode is output

value_out[1] = OUTPUT(GND);


--value_out[2] is value_out[2]
--operation mode is output

value_out[2] = OUTPUT(GND);


--value_out[3] is value_out[3]
--operation mode is output

value_out[3] = OUTPUT(GND);


--value_out[4] is value_out[4]
--operation mode is output

value_out[4] = OUTPUT(GND);


--value_out[5] is value_out[5]
--operation mode is output

value_out[5] = OUTPUT(GND);


--value_out[6] is value_out[6]
--operation mode is output

value_out[6] = OUTPUT(GND);


--value_out[7] is value_out[7]
--operation mode is output

value_out[7] = OUTPUT(GND);


--value_out[8] is value_out[8]
--operation mode is output

value_out[8] = OUTPUT(GND);


--value_out[9] is value_out[9]
--operation mode is output

value_out[9] = OUTPUT(GND);


